
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    #运行模式设置[ kqueue | rtsig | epoll | /dev/poll | select | poll ];
    use epoll;
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    #服务器名称相关设置
    server_names_hash_max_size    256;
    server_names_hash_bucket_size 512;
 
    #默认编码
    charset UTF-8;
 
    #开启高效文件传输模式,直接从系统级别传输(Linux 2.4以上支持,纯文件服务器才能打开)
    sendfile   off;
 
    #网络TCP_NOPUSH和TCP_NODELAY参数设置
    #tcp_nopush on;
    tcp_nodelay on;
 
    #设置保留链接超时时间为75秒 设置header超时时间为20秒
    keepalive_timeout 75 20;
 
    #打开gzip压缩
    gzip  on;
 
    #最小压缩文件大小
    gzip_min_length  1K;
 
    #压缩缓冲区
    gzip_buffers     4 8k;
 
    #压缩类型
    gzip_types       text/* text/css application/javascript application/x-javascript application/xml;
 
    #压缩级别 1-9 1最快 9最慢
    gzip_comp_level  9;
 
    #压缩通过代理的所有文件
    gzip_proxied     any;
 
    #vary header支持
    gzip_vary        on;
 
    #压缩版本（默认1.1，前端为squid2.5使用1.0）
    gzip_http_version 1.1;
    
 
    #输出缓冲区
    output_buffers   4  32k;
 
    #输出拆包大小
    postpone_output  1460;
 
    #接收header的缓冲区大小
    client_header_buffer_size 128k;
    large_client_header_buffers 4 256k;
 
    #客户端发送header超时
    client_header_timeout  3m;
 
    #客户端发送内容超时
    client_body_timeout    3m;
 
    #发送到客户端超时
    send_timeout           3m;
 
 
 
    #捕捉代理端的http错误
    #proxy_intercept_errors  on;
 
 
 
    #日志文件格式
    log_format main '$remote_addr $http_x_forwarded_for $remote_user $time_iso8601 $status '
                           '$server_protocol logTraceId:$request_id $request_method $uri $http_referer $gzip_ratio '
                           '"$http_user_agent" '
                           '$body_bytes_sent $bytes_sent $request_length "$upstream_addr" "$upstream_header_time" "$upstream_response_time" $request_time';   
    log_format  requestBody  '$remote_addr - $remote_user [$time_local] "$request" '
                      '"$status" $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" logTraceId:$request_id req_body:"$request_body" '
                      '$upstream_addr $bytes_sent $request_length "$upstream_response_time" "$request_time"';	
	lua_need_request_body on; 
    #tcp_nopush     on;

    #keepalive_timeout  0;

    #gzip  on;

    server {
        listen       8888;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        set $resp_body "";
        location /proxy/ {
            proxy_pass http://192.168.1.153/index.php/;
            
            lua_need_request_body on;
            body_filter_by_lua '
                local resp_body =string.sub(ngx.arg[1],1,1000)
                ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
                if ngx.arg[2] then 
                    ngx.var.resp_body = ngx.ctx.buffered
                end
            ';
        }
       location /hello {
           default_type text/html;
           content_by_lua '
                 ngx.say("<p>Hello</p>")
          ';
       }
      location ~ /lua/(\d+)/(\d+) {
         # 自定义 nginx 变量，可在 lua 中使用
          set $a $1; # 获取 第一个子分组匹配的数字
          set $b $host; 
           lua_code_cache off; # 不缓存 lua 脚本，每次修改 lua 脚本直接生效
           default_type 'text/html';
          #相对路径 为 相对于 nginx 的安装目录
           #content_by_lua_file conf/lua/test.lua;
          content_by_lua_file /home/zhss/nginx_lua/test_request.lua; 
         echo_after_body "ngx.var.b $b";
     }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
